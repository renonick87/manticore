var randomstring = require('randomstring');

module.exports = function (body) {
    return new UserRequest(body);
}

/**
* Stores information about a user's request and the address information of their core/hmi
* @constructor
* @param {object} body - An object of the user's request and other information
* @param {string} body.id - The id associated with a user
* @param {array} body.build - An array of objects that modify the CMakeLists.txt file
* @param {object} body.branch - An object which determines which branches to use for core/hmi
* @param {string} body.branch.hmi - The HMI branch to use
* @param {string} body.branch.core - The sdl_core branch to use
* @param {string} body.hmiName - Specifies which implementation of the HMI to use
* @param {string} body.userToHmiPrefix - Generated by Manticore that identifies where the HMI is
* @param {string} body.hmiToCorePrefix - ???
* @param {number} body.tcpPortExternal - Generated by Manticore that identifies the port of how to route to sdl_core
* @param {string} body.brokerAddressPrefix - Generated by Manticore that identifies where the broker is
* @param {number} body.tcpPortInternal - The actual port of sdl_core 
* @param {number} body.brokerPortInternal - The actual port of sdl_broker. 
* @param {number} body.hmiAddressInternal - The actual address of sdl_core
*/
//put the information from the request endpoint into this
function UserRequest (body) {
	if (body === undefined) {
		body = {};
	}
	this.id = body.id;
	this.build = body.build;
	this.branch = body.branch;
	this.hmiName = body.hmiName;
	this.userToHmiPrefix = body.userToHmiPrefix;
	this.hmiToCorePrefix = body.hmiToCorePrefix;
	this.tcpPortExternal = body.tcpPortExternal;
	this.brokerAddressPrefix = body.brokerAddressPrefix;
	this.tcpPortInternal = body.tcpPortInternal;
	this.brokerPortInternal = body.brokerPortInternal;
	this.hmiAddressInternal = body.hmiAddressInternal;
}

/**
* Make a JSON object out of the information, and stringify it
* @returns {string} - Stringified JSON of this class instance
*/
UserRequest.prototype.getString = function () {
	return JSON.stringify({
		id: this.id,
		build: this.build,
		branch: this.branch,
		hmiName: this.hmiName,
		userToHmiPrefix: this.userToHmiPrefix,
		hmiToCorePrefix: this.hmiToCorePrefix,
		tcpPortExternal: this.tcpPortExternal,
		brokerAddressPrefix: this.brokerAddressPrefix,
		tcpPortInternal: this.tcpPortInternal,
		brokerPortInternal: this.brokerPortInternal,
		hmiAddressInternal: this.hmiAddressInternal
	});
}

/**
* Takes in stringified JSON and converts it to a valid UserRequest
* @returns {UserRequest} - A UserRequest
*/
UserRequest.prototype.parse = function (string) {
	return new UserRequest(JSON.parse(string));
}

//THESE FUNCTIONS ARE MEANT TO BE FOR TESTING PURPOSES ONLY

//make some dummy data that a user request would have before manipulating the request info
UserRequest.prototype.generateDataInitial = function () {
	var request = new UserRequest();
	request.id = randomstring.generate(10);
	request.build = randomstring.generate(10)
	request.branch = randomstring.generate(10);
	request.hmiName = randomstring.generate(10);
	request.userToHmiPrefix = randomstring.generate(10);
	request.hmiToCorePrefix = randomstring.generate(10);
	request.tcpPortExternal = randomstring.generate(10);
	request.brokerAddressPrefix = randomstring.generate(10);
	request.tcpPortInternal = undefined;
	request.brokerPortInternal = undefined;
	return request;
}

//make some dummy data that a core service would have
UserRequest.prototype.generateDataCore = function () {
	var request = new UserRequest();
	request.id = randomstring.generate(10);
	request.build = randomstring.generate(10)
	request.branch = randomstring.generate(10);
	request.hmiName = randomstring.generate(10);
	request.userToHmiPrefix = randomstring.generate(10);
	request.hmiToCorePrefix = randomstring.generate(10);
	request.tcpPortExternal = randomstring.generate(10);
	request.brokerAddressPrefix = randomstring.generate(10);
	request.tcpPortInternal = randomstring.generate(10); //specific to core
	request.brokerPortInternal = undefined;
	return request;
}

//make some dummy data that an hmi service would have
UserRequest.prototype.generateDataHmi = function () {
	var request = new UserRequest();
	request.id = randomstring.generate(10);
	request.build = randomstring.generate(10);
	request.branch = randomstring.generate(10);
	request.hmiName = randomstring.generate(10);
	request.userToHmiPrefix = randomstring.generate(10);
	request.hmiToCorePrefix = randomstring.generate(10);
	request.tcpPortExternal = randomstring.generate(10);
	request.brokerAddressPrefix = randomstring.generate(10);
	request.tcpPortInternal = undefined;
	request.brokerPortInternal = randomstring.generate(10); //specific to hmi
	return request;
}